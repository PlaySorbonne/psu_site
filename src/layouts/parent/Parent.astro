---
// à utiliser sur un MDX <!>

import type { MarkdownLayoutProps } from "astro";
import FrontPage from "../FrontPage.astro";
import {
  rawMDtoSortedArray,
  type EventT,
  type MDnXInstance,
  type ClubName,
} from "@/helpers";
import ColorLigne from "@/components/global/ColorLigne.astro";
import Section from "@/components/markdown/Section.astro";

type Props = { logo?: ClubName } & MarkdownLayoutProps<{
  title: string;
  description?: string;
  showDescription?: boolean;
  eventTitle?: string;
  eventDescription?: string;
}>;

let {
  frontmatter: {
    title,
    description,
    showDescription = false,
    eventDescription,
    eventTitle,
  },
  logo,
  url,
  file,
} = Astro.props;

const indexLike = ["clubs", "events"]; // liste des pages à considérer comme index dans la recherche des events

const isLikeIndex = indexLike.some((e) => url.includes(e));

let imported = (
  await Astro.glob<MDnXInstance<EventT>>("../../pages/**/*{.md,.mdx}")
)
  .filter(
    (e) => isLikeIndex || e.url.includes(url.split("/").splice(-1, 1).join("/"))
  ) // on garde ceux qui sont plus profonds que nous ou tout
  .filter((e) => e.file !== file); // on enlève celui qui est traité ici

let events = rawMDtoSortedArray(imported, Math.max(url.split("/").length, 2));
---

<FrontPage
  title={title}
  events={events}
  logo={logo}
  eventDescription={eventDescription}
  eventTitle={eventTitle}
>
  {
    showDescription && (
      <Section>
        <h1 class="title">{title}</h1>
        <ColorLigne />
        <p>{description}</p>
      </Section>
    )
  }

  <div class="md">
    <slot />
  </div>
</FrontPage>

<style>
  .md {
    width: 100%;
  }

  :global(h1) {
    font-size: 2rem;
    font-weight: 900;
    text-transform: uppercase;
  }

  .md :global(a) {
    color: rgb(var(--main-color));
    font-weight: bold;
  }

  .md :global(a:hover) {
    color: rgb(var(--secondary-color));
  }
</style>
