---
import Card, { type CardInfo } from "./Card.astro";

type Props = {
  cards: CardInfo[];
};

let { cards } = Astro.props;
---

<div>
  <!-- <div class="shade"></div> -->
  <div class="wrapperC animate">
    {
      cards.map((card) => (
        <div class="element">
          <Card {...card} />
        </div>
      ))
    }
  </div>
</div>

<style define:vars={{ dur: `${cards.length * 2}s` }}>
  .wrapperC {
    display: inline-flex;
    overflow: hidden;
    padding: 20px;
    margin-top: 20px;
    
  }

  .animate {
    animation-name: slide;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: normal;
    animation-duration: var(--dur);
  }

  .center {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  @keyframes slide {
    0% {
      transform: translateX(100vw);
    }
    100% {
      /* transform: translateX(calc(-50% - 50vw)); */
      transform: translateX(calc(-100% - 40vw));
    }
  }

  .element {
    margin: 0 10px;
  }

  .shade {
    position: absolute;
    z-index: 1;
    background: rgba(0, 0, 0, 1);

    width: 100%;
    height: 100%;
  }
</style>

<script>
  function animation() {
    const wrappers = document.querySelectorAll(".wrapperC");

    wrappers.forEach((wrapper, i) => {
      console.log(i, wrapper.scrollWidth, window.innerWidth);
      if (
        wrapper.scrollWidth > window.innerWidth - 64 ||
        (window.innerWidth > 1000 && wrapper.scrollWidth > 1000)
      ) {
        wrapper.classList.add("animate");
        wrapper.classList.remove("center");
      } else {
        wrapper.classList.remove("animate");
        wrapper.classList.add("center");
      }
    });
  }

  addEventListener("load", animation);
  addEventListener("resize", animation);
</script>
