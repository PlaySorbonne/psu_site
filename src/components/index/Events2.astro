---
import { getEventIcon } from "@/assets/events";
import ColorLigne from "../global/ColorLigne.astro";
import type { EventT } from "@/helpers";

import { marked } from "marked";

interface Props {
  events: EventT[];
  title: string;
  description?: string;
}

marked.use({
  breaks: true,
})

let { events, title, description } = Astro.props;

events = events.filter(
  (event) => !event.description || !event.description.startsWith("lorem")
); // do not list empty descriptions

---

<div class="content">
  <h1 class="title">{title}</h1>
  <ColorLigne />

  <div class="content__programme">
    {description && <div set:html={marked.parse(description)} />}
    {
      events.map((event, i) => (
        <a
          class={`element ${event.link && !event.noLink ? "clickable" : ""}`}
          href={event.noLink ? undefined : event.link}
        >
          <p class="title__element">{event.title}</p>
          <div class={`content__element ${i % 2 && "content_left"}`}>
            <img
              loading="lazy"
              src={event.icon || getEventIcon(event.icon).src}
              alt={event.title}
              class="img__element"
            />
            <div>
              <div set:html={marked.parse(event.description)} />
              {event.noLink ? (
                <p
                  class="more"
                  style={{
                    textAlign: !(i % 2) ? "right" : "left",
                  }}
                >
                  Plus d'informations Ã  venir
                </p>
              ) : (
                <p
                  class="fakelink"
                  style={{
                    textAlign: !(i % 2) ? "right" : "left",
                  }}
                >
                  En savoir plus
                </p>
              )}
            </div>
          </div>
        </a>
      ))
    }
  </div>
</div>
<style>
  .more,
  .fakelink {
    color: rgb(var(--main-color));
    font-weight: bold;
    width: 100%;
  }

  .fakelink:hover {
    color: rgba(var(--secondary-color), 0.8);
  }

  .content__programme {
    padding-top: 20px;
  }

  .img__element {
    max-width: 40%;
    max-height: 200px;
    height: 100%;
    box-shadow: 8px 8px 2px 1px rgba(var(--main-color), 0.4);
    margin: 0 20px;
  }

  .content__element {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
  }

  .content_left {
    flex-direction: row-reverse;
  }

  @media (max-width: 768px) {
    .content__element {
      flex-direction: column;
      align-items: center;
    }

    .content_left {
      flex-direction: column;
    }
  }

  .title__element {
    padding: 5px;
    margin: 10px 0px;

    font-weight: bold;
    text-decoration: underline;
  }

  .title__element::first-letter {
    text-transform: uppercase;
  }

  .clickable .title__element {
    box-shadow: inset 0 0 rgb(var(--main-color));
    transition: 1s;
  }

  .clickable:hover .title__element {
    box-shadow: inset 60em 0 rgb(var(--main-color));
    color: white;
  }

  .element {
    padding: 10px 0;
    transition: 1.5s;
  }
</style>
